"""reset base

Revision ID: 70d10090ed94
Revises:
Create Date: 2025-06-24 21:50:06.310851

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '70d10090ed94'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # 1. Creamos el tipo ENUM 'racestatus' si no existe.
    # Usamos try-except para manejar el caso donde el tipo ya podría existir
    # si la migración anterior falló en un punto posterior.
    try:
        op.execute("CREATE TYPE racestatus AS ENUM ('PLANNED', 'ACTIVE', 'ARCHIVED');")
    except sa.exc.ProgrammingError as e:
        if "already exists" not in str(e):
            raise
    
    # 2. Añadimos la columna 'status' a la tabla 'races', PERMITIENDO NULLS inicialmente.
    # Esto evita el error NotNullViolation si ya hay datos en la tabla.
    with op.batch_alter_table('races', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status', sa.Enum('PLANNED', 'ACTIVE', 'ARCHIVED', name='racestatus'), nullable=True))

    # 3. Actualizamos las filas existentes para dar un valor por defecto a la nueva columna.
    # Elegimos 'PLANNED' como el estado por defecto para las carreras existentes.
    op.execute("UPDATE races SET status = 'PLANNED' WHERE status IS NULL;")

    # 4. Alteramos la columna 'status' para que sea NOT NULL.
    # Esto se hace después de asegurar que no hay valores NULL.
    with op.batch_alter_table('races', schema=None) as batch_op:
        batch_op.alter_column('status',
                              existing_type=sa.Enum('PLANNED', 'ACTIVE', 'ARCHIVED', name='racestatus'),
                              type_=sa.Enum('PLANNED', 'ACTIVE', 'ARCHIVED', name='racestatus'), # Agregado para resolver el error
                              nullable=False,
                              existing_nullable=True,
                              postgresql_using="status::racestatus") # Asegura el casteo si es necesario
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # En el downgrade, el orden es inverso:
    # 1. Eliminamos la restricción NOT NULL si se añadió.
    with op.batch_alter_table('races', schema=None) as batch_op:
        # Primero, haz que la columna sea nullable de nuevo antes de eliminarla
        # Esto es una medida de seguridad, aunque drop_column debería manejarlo.
        batch_op.alter_column('status',
                              existing_type=sa.Enum('PLANNED', 'ACTIVE', 'ARCHIVED', name='racestatus'),
                              nullable=True,
                              existing_nullable=False)
        batch_op.drop_column('status')
    
    # 2. Finalmente, eliminamos el tipo ENUM a nivel de esquema de base de datos.
    op.execute("DROP TYPE racestatus;")

    # ### end Alembic commands ###
