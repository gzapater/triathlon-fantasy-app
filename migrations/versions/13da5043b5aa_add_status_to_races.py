"""add_status_to_races

Revision ID: 13da5043b5aa
Revises: 53465fe235cb
Create Date: 2025-06-24 08:49:12.970934

"""
from alembic import op
import sqlalchemy as sa
from backend.models import RaceStatus # Import RaceStatus for the Enum

# revision identifiers, used by Alembic.
revision = '13da5043b5aa'
down_revision = '53465fe235cb' # Make sure this points to the actual previous migration
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - manually adjusted ###

    # Define the Enum type for PostgreSQL if not using native Enum
    # For SQLite, SQLAlchemy handles Enum translation to VARCHAR with CHECK constraints.
    # For PostgreSQL, it's better to create the type explicitly if not using native Enum support in SQLAlchemy 1.4+ for this.
    # However, the model uses SQLAlchemyEnum(RaceStatus), which should handle this.
    # We just need to ensure the column is added.

    # Add the status column to the races table
    with op.batch_alter_table('races', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status', sa.Enum(RaceStatus, name='racestatus'), nullable=False, server_default=RaceStatus.PLANNED.value))

    # If using SQLite, `nullable=False` without a `server_default` directly in `add_column`
    # might cause issues on existing rows if there's no SQLAlchemy-level default handling during data insertion.
    # However, our model has `default=RaceStatus.PLANNED`.
    # For existing rows, if `server_default` is not respected by older SQLite versions for ENUM-like CHECK constraints,
    # we might need an UPDATE statement. But Alembic with SQLAlchemy's Enum should handle this.
    # `server_default` for Enum in Alembic often translates to the string value of the enum.
    # Let's ensure the default is applied for existing rows if they don't get it automatically.
    # This is more of a precaution; often, the `server_default` in `add_column` is sufficient.
    # If the table is empty or all new rows will get the SQLAlchemy model default, this is not strictly needed.
    # op.execute("UPDATE races SET status = 'PLANNED' WHERE status IS NULL") # Example if needed

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - manually adjusted ###
    with op.batch_alter_table('races', schema=None) as batch_op:
        batch_op.drop_column('status')

    # If the ENUM type 'racestatus' was created explicitly (e.g. for PostgreSQL without native Enum handling in older SQLAlchemy),
    # it would need to be dropped here:
    # op.execute("DROP TYPE racestatus;")
    # However, SQLAlchemy's Enum wrapper usually manages this.

    # ### end Alembic commands ###
